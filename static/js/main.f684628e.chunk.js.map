{"version":3,"sources":["DataCount/Input/InputData.module.css","DisplayCount/Input/Input.module.css","App.module.css","DisplayCount/DisplayCount.module.css","DisplayCount/Button/ButtonWin.module.css","DataCount/DataCount.module.css","DataCount/Button/ButtonData.module.css","DisplayCount/Input/Input.jsx","DisplayCount/Button/ButtonWin.jsx","DisplayCount/DisplayCounter.jsx","DataCount/Input/InputData.jsx","DataCount/Button/ButtonData.jsx","DataCount/DataCount.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","InputWin","valueSet","this","props","state","inputError","setError","countValue","classForRed","maxValue","s","redSucks","inputWin","className","React","Component","ButtonWin","buttonWin","disabled","incDisables","onClick","countPlus","resetDisables","countReset","DisplayCounter","win","Input","onMinValueChange","e","onMinValueAdd","currentTarget","value","onMaxValueChange","onMaxValueAdd","classForRedMin","minDisable","inputs","classForRedMax","maxDisable","wrapper","inputBlock","type","onChange","minValue","ButtonData","buttonData","setDisable","addCount","DataCount","InputData","App","setState","newMinValue","saveState","newMaxValue","stateAsstring","JSON","stringify","localStorage","setItem","restoreState","stateAsString","getItem","parse","app","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f684628e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"InputData_wrapper__NxVRj\",\"inputBlock\":\"InputData_inputBlock__3bdcq\",\"inputs\":\"InputData_inputs__3lgYG\",\"redSucks\":\"InputData_redSucks__3GQxW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputWin\":\"Input_inputWin__2u7f_\",\"redSucks\":\"Input_redSucks__2Z__Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__3bSvG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"win\":\"DisplayCount_win__2_h7M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonWin\":\"ButtonWin_buttonWin__11ZN9\",\"dis\":\"ButtonWin_dis__11InY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"win\":\"DataCount_win__2mud9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonData\":\"ButtonData_buttonData__1Rjwn\",\"dis\":\"ButtonData_dis__3HRQw\"};","import React from 'react';\nimport s from './Input.module.css';\n\n\nclass InputWin extends React.Component {\n\n    render() {\n\n        let valueSet = this.props.state.inputError ? 'Error value' :\n            this.props.state.setError ? \"SET BUTTON\" :\n                this.props.state.countValue;\n\n        let classForRed = this.props.state.countValue === this.props.state.maxValue ||\n        this.props.state.inputError||\n        this.props.state.setError ? `${s.redSucks}` : `${s.inputWin}`;\n\n        return (\n            <div className={classForRed}>\n                {valueSet}\n            </div>\n        );\n    }\n}\n\nexport default InputWin;\n","import React from 'react';\nimport s from './ButtonWin.module.css';\n\nclass ButtonWin extends React.Component {\n\n    render() {\n\n        return (\n            <div className={s.buttonWin}>\n                <button disabled={this.props.state.incDisables} onClick={this.props.countPlus}>inc</button>\n                <button disabled={this.props.state.resetDisables} onClick={this.props.countReset}>reset</button>\n            </div>\n        );\n    }\n}\n\nexport default ButtonWin;\n","import React from 'react';\nimport s from './DisplayCount.module.css';\nimport InputWin from \"./Input/Input\";\nimport ButtonWin from \"./Button/ButtonWin\";\n\nclass DisplayCounter extends React.Component {\n\n    render() {\n        return (\n                <div className={s.win}>\n                    <InputWin state={this.props.state}/>\n                    <ButtonWin state={this.props.state}\n                               countPlus={this.props.countPlus}\n                               countReset={this.props.countReset}\n                    />\n                </div>\n        );\n    }\n}\n\nexport default DisplayCounter;\n","import React from 'react';\nimport s from './InputData.module.css';\n\n\nclass InputWin extends React.Component {\n\n    onMinValueChange = (e) => {\n        this.props.onMinValueAdd(+e.currentTarget.value)\n    };\n    onMaxValueChange = (e) => {\n        this.props.onMaxValueAdd(+e.currentTarget.value)\n    };\n\n    render() {\n\n        let classForRedMin = this.props.state.minDisable ? `${s.redSucks}`:`${s.inputs}`\n        let classForRedMax = this.props.state.maxDisable ? `${s.redSucks}`:`${s.inputs}`\n\n        return (\n            <div className={s.wrapper}>\n                <div className={s.inputBlock}>\n                    <div>\n                        max value:\n                    </div>\n                    <input type='number'\n                           className={classForRedMax}\n                           value={this.props.state.maxValue}\n                           onChange={this.onMaxValueChange}/>\n                </div>\n                <div className={s.inputBlock}>\n                    <div>\n                        min value:\n                    </div>\n                    <input type='number'\n                           className={classForRedMin}\n                           value={this.props.state.minValue}\n                           onChange={this.onMinValueChange}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default InputWin;\n","import React from 'react';\nimport s from './ButtonData.module.css';\n\nclass ButtonData extends React.Component {\n\n    render() {\n\n        return (\n            <div className={s.buttonData}>\n                <button disabled={this.props.setDisable} onClick={this.props.addCount}>set</button>\n            </div>\n        );\n    }\n}\n\nexport default ButtonData;\n","import React from 'react';\nimport s from './DataCount.module.css';\nimport InputData from \"./Input/InputData\";\nimport ButtonData from \"./Button/ButtonData\";\n\n\nclass DataCount extends React.Component {\n\n    render() {\n        return (\n            <div className={s.win}>\n                <InputData state={this.props.state}\n                           onMinValueAdd={this.props.onMinValueAdd}\n                           onMaxValueAdd={this.props.onMaxValueAdd}/>\n                <ButtonData addCount={this.props.addCount}\n                            setDisable={this.props.state.setDisable}/>\n            </div>\n        );\n    }\n}\n\nexport default DataCount;\n","import React from 'react';\nimport s from './App.module.css';\nimport DisplayCounter from \"./DisplayCount/DisplayCounter\";\nimport DataCount from \"./DataCount/DataCount\";\n\nclass App extends React.Component {\n\n    state = {\n        minValue: null,\n        maxValue: null,\n        countValue: null,\n        resetDisables: false,\n        incDisables: false,\n        maxDisable: false,\n        minDisable: false,\n        setDisable: false,\n        inputError: false,\n        setError:false,\n    }\n    countPlus = () => {\n        if (this.state.countValue < this.state.maxValue) {\n            this.setState({countValue: this.state.countValue + 1,\n                incDisables: false,\n                resetDisables: false,\n                setDisable: true,})\n        }\n        if (this.state.countValue === this.state.maxValue) {\n            this.setState({incDisables: true,\n                resetDisables: false,\n                setDisable: true,})\n        }\n    }\n    countReset = () => {\n        if (this.state.countValue !== 0) {\n            this.setState({countValue: this.state.minValue,\n                resetDisables: false,\n                incDisables: false,\n                setDisable: true,})\n        } else {\n            this.setState({resetDisables: true, setDisable: true,})\n        }\n    }\n    onMinValueAdd = (newMinValue) => {\n        if (newMinValue < 0) {\n            this.setState({\n                minValue: -1,\n                minDisable: true,\n                setDisable: true,\n                inputError: true,\n            })\n        }\n        if (newMinValue >= 0) {\n            this.setState({\n                minValue: newMinValue,\n                minDisable: false,\n                setDisable: false,\n                inputError: false,\n                resetDisables: true,\n                incDisables: true,\n                setError:true,\n            }, () => {\n                this.saveState()\n            })\n        }\n        if (newMinValue >= this.state.maxValue) {\n            this.setState({\n                minValue: this.state.maxValue,\n                minDisable: true,\n                setDisable: true,\n                inputError: true,\n            })\n        }\n    }\n    onMaxValueAdd = (newMaxValue) => {\n        if (newMaxValue < this.state.minValue) {\n            this.setState({\n                maxValue: this.state.minValue,\n                maxDisable: true,\n                setDisable: true,\n                inputError: true,\n                setError:true,\n            })\n        }\n        if (newMaxValue >= this.state.minValue) {\n            this.setState({\n                maxValue: newMaxValue,\n                maxDisable: false,\n                setDisable: false,\n                inputError: false,\n                resetDisables: true,\n                incDisables: true,\n                setError:true,\n            }, () => {\n                this.saveState()\n            })\n        }\n    }\n    addCount = () => {\n        this.setState({\n            countValue: this.state.minValue,\n            resetDisables: false,\n            incDisables: false,\n            setError:false,\n        }, () => {\n            this.saveState()\n        })\n    }\n    saveState = () => {\n        let stateAsstring = JSON.stringify(this.state)\n        localStorage.setItem('our-state', stateAsstring)\n    }\n    restoreState = () => {\n        let stateAsString = localStorage.getItem('our-state');\n        if (stateAsString !== null) {\n            let state = JSON.parse(stateAsString);\n            this.setState(state)\n        }\n    }\n    componentDidMount() {\n        this.restoreState();\n    }\n\n    render() {\n        return (\n            <div className={s.app}>\n                <DataCount state={this.state}\n                           onMinValueAdd={this.onMinValueAdd}\n                           onMaxValueAdd={this.onMaxValueAdd}\n                           addCount={this.addCount}/>\n                <DisplayCounter state={this.state}\n                                countPlus={this.countPlus}\n                                countReset={this.countReset}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}